syntax = "proto2";
//option optimize_for = LITE_RUNTIME;
import "common_pb.proto";
import "pvp_common.proto";
package protocol;

// smite 协议定义

enum pb_pvp_type
{
    PVP_TYPE_UNKNOW = -1;
    PVP_TYPE_1V1 = 0;               // 1v1排位赛
    PVP_TYPE_2V2 = 1;               // 2v2排位赛
    PVP_TYPE_CLASSIC_1V1 = 8;       // 1v1 经典赛
    PVP_TYPE_CLASSIC_1V1_BOT = 16;  // 1v1 人机经典
}

enum pb_pvp_mode
{
    PVP_MODE_UNKNOWN = 0;
    PVP_MODE_PREMAKE = 1;
    PVP_MODE_ALL_PICK = 2;
    PVP_MODE_DRAFT = 4;
}

enum pb_lineup_type
{
    LINEUP_PVE = 0;                     // pve三段式
    LINEUP_1V1 = 1;                     // 天梯1v1
    LINEUP_PVBOT = 2;                   // 人机经典
    LINEUP_PANTHEON = 4;                // 神殿, 诸神之战
    LINEUP_ANCIENT_BF = 8;              // 远古战场
    LINEUP_LIGHTOM = 16;                // 光影战场

    LINEUP_UNKNOW = 0x77ffffff;         // 未知
}

enum pb_pvp_god_num
{
    PVP_1V1_PLAYER5_GOD_NUM = 5;
    PVP_2V2_PLAYER3_GOD_NUM = 3;
}

enum packet_command_id
{
/////////////////////////////////////////////////////////////////////////////////
	MAIN_SRV_CMD_START                  = 0;

    // for the old version
    CID_GW_USER_LOGIN                   = 1001;        // 玩家登录
    CID_GW_USER_OFFLINE                 = 1002;        // 玩家登出
    CID_GW_USER_HEARTBEAT               = 1003;        // 心跳协议

    // 网关服务包
    // Todo
    CID_LOBBY_MATCH_PVP_5V5             = 1004;         // PVP匹配
    CID_LOBBY_PVP_5V5_MATCH_DONE        = 1005;         // 服务通知PVP匹配成功
    CID_LOBBY_MATCH_PVP_5V5_CANCEL      = 1006;         // PVP匹配取消
	
	CID_RECONNECT_REQ                   = 1007;        //重连 cs_reconnect
	CID_RECONNECT_RSP                   = 1008; 

    // for MainSrv (3)
    MAIN_GET_ROLE_INFO_REQ              = 1;         // 请求角色信息
    MAIN_GET_ROLE_INFO_RSP              = 2;
    MAIN_GET_GODS_INFO_REQ              = 3;         // 请求神明信息
    MAIN_GET_GODS_INFO_RSP              = 4;
    MAIN_UPGRADE_GODS_REQ               = 5;         // 升级神明
    MAIN_UPGRADE_GODS_RSP               = 6;
    MAIN_UPGRADE_SKILL_REQ              = 7;         // 升级技能
    MAIN_UPGRADE_SKILL_RSP              = 8;
//  MAIN_ASK_PVE_REQ                    = 9;         // 请求pve
//  MAIN_ASK_PVE_RSP                    = 10;
    MAIN_ASK_PVE_END_REQ                = 11;         // 请求pve结算
    MAIN_ASK_PVE_END_RSP                = 12;
    MAIN_PVP_REWARD_NOTIFY              = 13;         // pvp结算
    MAIN_GET_CHEST_INFO_REQ             = 14;         // 请求宝箱信息
    MAIN_GET_CHEST_INFO_RSP             = 15;
    MAIN_UNLOCK_CHEST_REQ               = 16;         // 请求解锁宝箱
    MAIN_UNLOCK_CHEST_RSP               = 17;
    MAIN_OPEN_CHEST_REQ                 = 18;         // 请求开宝箱
    MAIN_OPEN_CHEST_RSP                 = 19;
    MAIN_PVP5_READY_NOTIFY              = 20;         // GameSrv准备就绪， 给客户端发送GameSrv相关信息
    MAIN_GET_COPY_INFO_REQ              = 21;         // 请求副本信息
    MAIN_GET_COPY_INFO_RSP              = 22;
    MAIN_GET_LINEUP_INFO_REQ            = 23;         // 请求阵容信息
    MAIN_GET_LINEUP_INFO_RSP            = 24;
    MAIN_SET_LINEUP_INFO_REQ            = 25;         // 设置阵容信息
    MAIN_SET_LINEUP_INFO_RSP            = 26;
    MAIN_UNLOCK_SKILL_REQ               = 27;         // 解锁技能
    MAIN_UNLOCK_SKILL_RSP               = 28;
    MAIN_UNLOCK_GOD_REQ                 = 29;         // 解锁英雄
    MAIN_UNLOCK_GOD_RSP                 = 30;
    MAIN_PVP_CHOOSE_GODS_DONE_NOTIFY    = 31;
    MAIN_COMBAT_CANCEL_REMATCH_NOTIFY   = 32;         // for sc_combat_cancel_notify
//  MAIN_GET_ALIAS_NAME_REQ             = 33;         // 
//  MAIN_GET_ALIAS_NAME_RSP             = 34;         // 
    MAIN_SET_ALIAS_NAME_REQ             = 35;         // 
    MAIN_SET_ALIAS_NAME_RSP             = 36;         // 

    //for shop
	MAIN_SHOW_SHOP_COMMON_REQ           = 38;     
	MAIN_SHOW_SHOP_COMMON_RSP           = 39;     
//	MAIN_STORE_BUY_CARD_2_REQ       	= 40;
//	MAIN_STORE_BUY_CARD_2_RSP       	= 41;     
	MAIN_SHOW_SHOP_CHEST_REQ			= 42;
	MAIN_SHOW_SHOP_CHEST_RSP			= 43;
	MAIN_SHOP_CHEST_BUY_REQ				= 44;     
	MAIN_SHOP_CHEST_BUY_RSP				= 45;
	MAIN_SHOW_SHOP_GOLD_REQ				= 46;
	MAIN_SHOW_SHOP_GOLD_RSP				= 47;
	MAIN_SHOP_GOLD_BUY_REQ				= 48;
	MAIN_SHOP_GOLD_BUY_RSP				= 49;
	//for mail
	MAIN_GET_MAIL_INFO_REQ              = 50;         // for cs_mail,sc_mail邮件相关 
	MAIN_GET_MAIL_INFO_RSP              = 51;		  //
	MAIN_OPEN_MAIL_REQ                  = 52;         //
	MAIN_OPEN_MAIL_RSP                  = 53;         //

	//for friend
	MAIN_SEARCH_UID_REQ                 = 54;          //通过昵称精确搜索
	MAIN_SEARCH_UID_RSP                 = 55;          //
	MAIN_ADD_FRIEND_REQ                 = 56;          //添加好友
	MAIN_ADD_FRIEND_RSP                 = 57;          //
	MAIN_DEL_FRIEND_REQ                 = 58;          //删除好友
	MAIN_DEL_FRIEND_RSP                 = 59;          //
	MAIN_SHOW_FRIEND_LIST_REQ           = 60;          //拉取好友列表
	MAIN_SHOW_FRIEND_LIST_RSP           = 61;          //
	MAIN_SEND_FRIEND_MSG_REQ            = 62;          //向好友发送消息
	MAIN_SEND_FRIEND_MSG_RSP            = 63;          //
	MAIN_GET_FRIEND_MSG_REQ             = 64;          //取好友消息
	MAIN_GET_FRIEND_MSG_RSP             = 65;          //
	MAIN_RECV_FRIEND_MSG_RSP            = 66;          //有好友向你发送了消息，收到这个包的时候，接下来调用MAIN_GET_FRIEND_MSG_REQ取消息
	MAIN_FRIEND_STATE_CHANGE_RSP        = 67;          //好友的游戏状态发生了改变
	MAIN_BE_ADD_FRIEND_RSP              = 68;          //被人添加为好友
	MAIN_BE_ADD_FRIEND_FOR_LOGIN_RSP    = 69;          //
	MAIN_RECV_LOBBY_VGS_RSP             = 82;          //vgs通知 sc_vgs 选角的时候使用
	MAIN_DONE_NEW_GUIDE_TASK_REQ        = 83;          //通知服务器已经完成了这一步新手任务
	MAIN_DONE_NEW_GUIDE_TASK_RSP        = 84;          //
	MAIN_GET_NEW_GUIDE_AWARD_REQ        = 85;          //向服务器发起请求领取奖励
	MAIN_GET_NEW_GUIDE_AWARD_RSP        = 86;          //
	MAIN_RECV_DEL_FRIEND_RSP            = 87;          //删除好友 如果被删除方在线，通知对方，在好友列表里面删除自己
	MAIN_BE_ADD_FRIEND_FOR_LOGIN_REQ    = 88;          //下线的时候被人添加为好友，上线之后客户端主动请求拉取下线有哪些人添加自己做为好友
//	MAIN_BACK_MAINUI_REQ                = 89;          //回到游戏主界面，用作好友状态切换
//	MAIN_BACK_MAINUI_RSP                = 90;          //
	MAIN_SHOW_PACKAGE_INFO_REQ          = 91;          //显示商城礼包信息
	MAIN_SHOW_PACKAGE_INFO_RSP          = 92;           
	MAIN_STORE_BUY_PACKAGE_REQ          = 93;          //购买商城礼包
	MAIN_STORE_BUY_PACKAGE_RSP          = 94;
	MAIN_SHOW_LOTTERY_REQ               = 95;          //打开神殿抽奖界面，不需要设置请求包
	MAIN_SHOW_LOTTERY_RSP               = 96;          //
	MAIN_START_LOTTERY_REQ              = 97;          //开始抽奖
	MAIN_START_LOTTERY_RSP              = 98;

	MAIN_RECV_GAME_VGS_RSP              = 99;          // vgs通知 sc_vgs pvp的时候使用
	MAIN_OPEN_FREE_CHEST_REQ            = 100;          // 打开免费宝箱 cs_store_buy_chest2
	MAIN_OPEN_FREE_CHEST_RSP            = 101;          // sc_store_buy_chest2
//	MAIN_GET_TASK_DAY_WEEK_AWARD_REQ    = 102;          // 领取周任务礼包，活跃点 
//	MAIN_GET_TASK_DAY_WEEK_AWARD_RSP    = 103;          //
//	MAIN_GET_TASK_ACHIVE_AWARD_REQ      = 104;          // 领取任务成就点礼包
//	MAIN_GET_TASK_ACHIVE_AWARD_RSP      = 105;
	MAIN_GET_TASK_UNIT_AWARD_REQ        = 106;          //领取单个任务的奖励
	MAIN_GET_TASK_UNIT_AWARD_RSP        = 107;
//	MAIN_INSERT_FLAG_CHECK_POINT_REQ    = 108;          //
//	MAIN_INSERT_FLAG_CHECK_POINT_RSP    = 109;          //sc_ask_pve_end
	MAIN_GET_ACTIVITY_INFO_REQ          = 110;          //拉取活动信息 task.proto cs_activity
	MAIN_GET_ACTIVITY_INFO_RSP          = 111;
	MAIN_GET_SEVEN_LOGIN_AWARD_REQ      = 112;          //领取七天登录奖励 task.proto cs_activity
	MAIN_GET_SEVEN_LOGIN_AWARD_RSP      = 113;
	MAIN_STONE_COMPOSE_REQ              = 114;          //合成宝石
	MAIN_STONE_COMPOSE_RSP              = 115;
	MAIN_SHOW_STONE_COMPOSE_REQ         = 116;          //显示合成
	MAIN_SHOW_STONE_COMPOSE_RSP         = 117;
	MAIN_UPGRADE_TECH_TREE_POINT_REQ    = 118;          //升级科技点
	MAIN_UPGRADE_TECH_TREE_POINT_RSP    = 119;
	MAIN_RESET_TECH_TREE_REQ            = 120;          //重置科技树
    MAIN_RESET_TECH_TREE_RSP            = 121; 
    MAIN_PVBOT_CHOOSE_GODS_DONE_REQ     = 122;          // classic 1v1 choose gods done
    MAIN_PVBOT_CHOOSE_GODS_DONE_RSP     = 123;
    MAIN_ASK_PVBOT_END_REQ              = 124;
    MAIN_ASK_PVBOT_END_RSP              = 125;
	MAIN_GET_RANK_DATA_REQ              = 126;          //排行榜
	MAIN_GET_RANK_DATA_RSP              = 127;
	MAIN_GET_FRIEND_RANK_DATA_REQ       = 128;          //好友排行榜
	MAIN_GET_FRIEND_RANK_DATA_RSP       = 129;
	MAIN_GET_SEASON_INFO_REQ            = 130;
    MAIN_GET_SEASON_INFO_RSP            = 131;
    //MAIN_GET_ARENA_REWARD_INFO_REQ    = 132;
    //MAIN_GET_ARENA_REWARD_INFO_RSQ    = 133;
    MAIN_SEASON_NOTIFY_READED           = 134;          // 已阅读的赛季通知回包
    MAIN_SEASON_NOTIFY_RSP              = 135;          // 赛季通知, 服务端主动推送
    MAIN_SEASION_REWARD_NOTIFY          = 136;          // 赛季宝箱打开掉落信息获取通知
	MAIN_GET_GOD_INFO_NEXT_SKILL_LVL_REQ  = 137;          //取出神明某个技能下一等级的数据
	MAIN_GET_GOD_INFO_NEXT_SKILL_LVL_RSP  = 138;          //取出神明某个技能下一等级的数据
	MAIN_UNLOCK_TECH_TREE_NODE_NOTIFY_RSP = 139;        //有新解锁的科技树节点通知
	MAIN_GET_TASK_DAY_AWARD_REQ           = 140;          // 领取每日活跃点奖励 
	MAIN_GET_TASK_DAY_AWARD_RSP           = 141;          //	
	MAIN_DO_TASK_REQ                      = 142;         //做任务
	MAIN_DO_TASK_RSP                      = 143;
	MAIN_SHOW_TASK_REQ                    = 144;    //显示任务
	MAIN_SHOW_TASK_RSP                    = 145;
	MAIN_SHOW_CHEST_CONTENT_REQ           = 146;  //显示宝箱的内容
	MAIN_SHOW_CHEST_CONTENT_RSP           = 147;
	MAIN_SET_SHOW_ACHIVE_REQ              = 148; //设置展示在好友资料里的成就项
	MAIN_SET_SHOW_ACHIVE_RSP              = 149; 
	MAIN_VIEW_ROLE_INFO_REQ	              = 150;  //查看玩家资料
	MAIN_VIEW_ROLE_INFO_RSP	              = 151;
	MAIN_NOTIFY_FRIEND_STATE_CHANGE_REQ   = 152; //通知玩家的好友，自己状态改变的协议，客户端主动发起，原因在于pve过程中，在一些状态中，服务器是不知道客户端状态的，例如进入pve布阵阶段
	MAIN_NOTIFY_FRIEND_STATE_CHANGE_RSP   = 153; //回包可以不处理
//	MAIN_GET_COPIES_INFO_REQ              = 154; // 获取副本信息请求
//  MAIN_GET_COPIES_INFO_RSP              = 155; // 获取副本信息回包
	MAIN_OBTAIN_STAR_AWARD_REQ            = 156; // 领取星级奖励请求
	MAIN_OBTAIN_STAR_AWARD_RSP            = 157; // 领取星级奖励回包
	MAIN_VIEW_ACTIVITY_PAGE_REQ           = 158; //浏览了某个活动页签 cs_activity
	MAIN_VIEW_ACTIVITY_PAGE_RSP           = 159;
	MAIN_PVE_RAID_REQ                     = 160; // 扫荡请求
    MAIN_PVE_RAID_RSP                     = 161; // 扫荡回包
    MAIN_STORE_BUY_PHY_STRENGTH_REQ       = 162; // for cs_store_buy_phy_strength
    MAIN_STORE_BUY_PHY_STRENGTH_RSP       = 163; // for sc_store_buy_phy_strength
    MAIN_ASK_ROUND3_PVE_REQ               = 164; // for cs_ask_round3_pve
    MAIN_ASK_ROUND3_PVE_RSP               = 165; // for sc_ask_round3_pve
    MAIN_ASK_ROUND3_PVE_END_REQ           = 166; // for cs_ask_round3_pve_end
    MAIN_ASK_ROUND3_PVE_END_RSP           = 167; // for sc_ask_round3_pve_end

	MAIN_GET_SHOP_GIFT_REQ                = 168; //取商城售卖的礼包信息 
	MAIN_GET_SHOP_GIFT_RSP                = 169;
	MAIN_GET_SHOP_SELL_RANK_REQ           = 170; //取商城推荐的物品
	MAIN_GET_SHOP_SELL_RANK_RSP           = 171;
	MAIN_GET_LEVEL_GIFT_REQ               = 172; //领取等级礼包
	MAIN_GET_LEVEL_GIFT_RSP               = 173;
	MAIN_GET_ACTIVITY_TASK_AWARD_REQ      = 174; //领取活动任务的奖励
	MAIN_GET_ACTIVITY_TASK_AWARD_RSP      = 175;
	MAIN_SHOW_STRENGTH_BUY_REQ            = 176; //显示体力购买的页面
	MAIN_SHOW_STRENGTH_BUY_RSP            = 177; //
	MAIN_STRENGTH_BUY_REQ                 = 178; //购买体力
	MAIN_STRENGTH_BUY_RSP                 = 179; //
	MAIN_RESET_PVE_FIGHT_NUM_REQ          = 180; //pve关卡每日挑战次数重置
	MAIN_RESET_PVE_FIGHT_NUM_RSP		  = 181;
	MAIN_PAY_REQ                          = 182; // cs_pay
	MAIN_PAY_RSP                          = 183; 
	MAIN_USE_EXP_WATER_REQ                = 184; // 使用经验药水
	MAIN_USE_EXP_WATER_RSP                = 185; 
	MAIN_EXCHANGE_GOD_FRAMENT_REQ         = 186; // 万能碎片兑换
	MAIN_EXCHANGE_GOD_FRAMENT_RSP         = 187;
	MAIN_SHOW_USE_EXP_WATER_REQ           = 188; //显示一键使用经验药水
    MAIN_SHOW_USE_EXP_WATER_RSP           = 189;
    MAIN_GODS_OF_WAR_REQ                  = 190;
    MAIN_GODS_OF_WAR_RSP                  = 191;
    MAIN_GODS_OF_WAR_END_REQ              = 192;
    MAIN_GODS_OF_WAR_END_RSP              = 193;
    MAIN_GODS_OF_WAR_RAID_REQ             = 194;
    MAIN_GODS_OF_WAR_RAID_RSP             = 195;
	MAIN_CALC_AUTO_LINEUP_REQ             = 196; //计算自动布阵
	MAIN_CALC_AUTO_LINEUP_RSP             = 197;
	MAIN_TEAM_LEVEL_UP_RSP                = 198; //队伍升级通知
	MAIN_SHOW_SHANGDIAN_REQ				  = 199; //打开商店面板
	MAIN_SHOW_SHANGDIAN_RSP				  = 200; 
	MAIN_SHANGDIAN_BUY_REQ				  = 201; //商店里面买东西
	MAIN_SHANGDIAN_BUY_RSP				  = 202;
	MAIN_SHANGDIAN_FRESH_REQ			  = 203; //商店刷新
	MAIN_SHANGDIAN_FRESH_RSP			  = 204;
	MAIN_GODTALENT_ACTIVE_REQ			  = 205; //激活天赋
	MAIN_GODTALENT_ACTIVE_RSP			  = 206;
	MAIN_GODTALENT_SWITCH_REQ			  = 207; //切换天赋
	MAIN_GODTALENT_SWITCH_RSP			  = 208;
	MAIN_GODTALENT_UNLOCK_REQ			  = 209;
    MAIN_GODTALENT_UNLOCK_RSP			  = 210; //解锁天赋

    // 远古战场
    MAIN_ANCIENT_BATTLEFIELD_INFO_REQ     = 211; // 请求远古战场信息
    MAIN_ANCIENT_BATTLEFIELD_INFO_RSP     = 212; // 
    MAIN_ANCIENT_BATTLE_REQ               = 213; // 请求远古战斗
    MAIN_ANCIENT_BATTLE_RSP               = 214; // 
    MAIN_ANCIENT_BATTLE_END_REQ           = 215; // 请求远古战斗结束
    MAIN_ANCIENT_BATTLE_END_RSP           = 216; // 
    MAIN_ANCIENT_REVIVE_REQ               = 217; // 远古复活卡使用
    MAIN_ANCIENT_REVIVE_RSP               = 218; // 
    MAIN_ANCIENT_RAID_REQ                 = 219; // 远古扫荡
    MAIN_ANCIENT_RAID_RSP                 = 220; // 
    MAIN_ANCIENT_BATTLEFIELD_RESET_REQ    = 221; // 重置远古战场
    MAIN_ANCIENT_BATTLEFIELD_RESET_RSP    = 222; //
    MAIN_ANCIENT_OPEN_CHEST_REQ           = 223; // 打开宝箱
    MAIN_ANCIENT_OPEN_CHEST_RSP           = 224; //
    MAIN_ANCIENT_BF_UNIT_REQ              = 225; // 关卡信息请求
    MAIN_ANCIENT_BF_UNIT_RSP              = 226; //

    // 光影战场
    MAIN_LIGHTOM_BATTLE_REQ               = 230; // 光影战斗请求
    MAIN_LIGHTOM_BATTLE_RSP               = 231;
    MAIN_LIGHTOM_BATTLE_END_REQ           = 232; // 光影战斗结束请求
    MAIN_LIGHTOM_BATTLE_END_RSP           = 233;
    MAIN_LIGHTOM_RAID_REQ                 = 234; // 光影扫荡请求
    MAIN_LIGHTOM_RAID_RSP                 = 235;
    MAIN_LIGHTOM_INFO_REQ                 = 236; // 光影战场信息请求
    MAIN_LIGHTOM_INFO_RSP                 = 237;
	
	MAIN_FRIEND_GIFT_PRESENTED_REQ		  = 238; // 向好友赠送礼物
	MAIN_FRIEND_GIFT_PRESENTED_RSP		  = 239; 
	MAIN_FRIEND_GIFT_GET_REQ			  = 240; // 领取好友赠送的礼物
	MAIN_FRIEND_GIFT_GET_RSP			  = 241;
	MAIN_GET_ROUND_RECORD_REQ			  = 242; //	取对战记录
	MAIN_GET_ROUND_RECORD_RSP			  = 243;
	MAIN_GET_CURRENT_STRENGTH_REQ		  = 244; // 取当前体力
	MAIN_GET_CURRENT_STRENGTH_RSP		  = 245; //
	MAIN_RECV_FRIEND_PRESENTED_RSP		  = 246; // 收到好友向自己赠送礼物的通知
	MAIN_HIDE_ROUND_RECORD_REQ			  = 247; //隐藏对战记录
	MAIN_HIDE_ROUND_RECORD_RSP			  = 248;
	MAIN_NOTICE_HORSE_RSP				  = 249; //跑马灯
	
	// 邮件新增协议
    MAIN_OBTAIN_ALL_MAILS_REQ             = 250; // 一键领取所有奖励
    MAIN_OBTAIN_ALL_MAILS_RSP             = 251; //
    MAIN_OBTAIN_MAIL_GOODS_REQ            = 252; // 获取邮件里的物品 mail extend function
    MAIN_OBTAIN_MAIL_GOODS_RSP            = 253; //
    MAIN_DEL_READ_MAILS_REQ               = 254; // 删除已读奖励, 物品自动领取
    MAIN_DEL_READ_MAILS_RSP               = 255; //
	
	MAIN_GET_NICE_ROUND_RECORD_REQ		  = 256; //取精彩对局
	MAIN_GET_NICE_ROUND_RECORD_RSP		  = 257;
	MAIN_LIKE_NICE_ROUND_REQ			  = 258; //点赞精彩对局
	MAIN_LIKE_NICE_ROUND_RSP			  = 259;
	MAIN_VIEW_NICE_ROUND_REQ			  = 260; //观看录像
    MAIN_VIEW_NICE_ROUND_RSP			  = 261;
	MAIN_GOD_BREACH_REQ					  = 262; //英雄突破
	MAIN_GOD_BREACH_RSP					  = 263;
	MAIN_SHOP_GOODS_BUY_REQ				  = 264;//商城道具购买
	MAIN_SHOP_GOODS_BUY_RSP				  = 265;
	MAIN_SHOW_TASK_CHEST_REQ			  = 266;//查看任务宝箱内容
	MAIN_SHOW_TASK_CHEST_RSP			  = 267;
    
    // 诸神之战新增 购买挑战次数
    MAIN_GODS_OF_WAR_BUY_FIGHT_NUM_REQ    = 280;
    MAIN_GODS_OF_WAR_BUY_FIGHT_NUM_RSP    = 281;

    // 光影战场 购买挑战次数
    MAIN_LIGHTOM_BUY_FIGHT_NUM_REQ        = 300;
    MAIN_LIGHTOM_BUY_FIGHT_NUM_RSP        = 301;

    // 任务新增
    MAIN_UPDATE_TASK_NOTIFY               = 320; // 任务改变通知
	
	MAIN_SRV_CMD_END                    = 5000;
	////////////////////////////////////////////////////////////////////////////////////
	
	/////////////////////////////////////////////////////////////
	GAME_SRV_CMD_START                      = 5001;
    // for GameSrv (4)
    GAME_PVP5_MATCH_DONE_REQ            = 5002;         // 通知GameSrv匹配完成了
    GAME_PVP5_END_NOTIFY                = 5003;         // 通知MainSrv战斗结束了
    GAME_PVP5_FRAME_SYNC_NOTIFY         = 5004;         // 通知客户端同步数据
    GAME_PVP5_FRAME_SYNC_DATA_REQ       = 5005;         // 客户端发送同步数据并请求另外一个客户端同步数据
    GAME_PVP5_FRAME_SYNC_DATA_REP       = 5006;         // 服务器返回另外一个客户端同步数据
	GAME_VGS_REQ                        = 5007;         // 发送vgs cs_vgs
	GAME_VGS_RSP                        = 5008;         // sc_vgs
	
	LOBBY_COMBAT_ACCEPT_ACK_REQ         = 5009;         // for cs_combat_accept_ack request
    LOBBY_COMBAT_ACCEPT_ACK_RSP         = 5010;         // for sc_combat_accept_ack response
    LOBBY_COMBAT_ACCPET_DONE_RSP        = 5011;         // for sc_combat_accpet_done response

    LOBBY_PVP_CHOOSE_GODS_REQ           = 5012;         // for cs_pvp_choose_gods request
    LOBBY_PVP_CHOOSE_GODS_RSP           = 5013;         // for sc_pvp_choose_gods response
    LOBBY_PVP_CHOOSE_GODS_CONFIRM_REQ   = 5014;         // for cs_pvp_choose_gods_confirm request
    LOBBY_PVP_CHOOSE_GODS_CONFIRM_RSP   = 5015;         // for sc_pvp_choose_gods_confirm response

    LOBBY_PVP_CHOOSE_GODS_DONE_NOTIFY   = 5016;         // for sc_pvp_choose_gods_done response

	LOBBY_VGS_REQ                       = 5017;         // 发送vgs  cs_vgs
	LOBBY_VGS_RSP                       = 5018;         // sc_vgs
	
	GAME_SURRENDER_REQ                  = 5019;
    GAME_SURRENDER_RSP  				= 5020;
    
    GAME_PVP_LOADING_REQ                = 5021;        // 设置进度
    GAME_PVP_LOADING_NOTIFY             = 5022;

    GAME_PVP_SYNC_DATA_REQ              = 5023;        // Tcp同步数据
    GAME_PVP_SYNC_DATA_RSP              = 5024;        // 服务器恢复客户端
	
	GAME_SRV_CMD_END                        = 5500;
	///////////////////////////////////////////////////////////////////////////
	
	//////////////////////////////////////////////////////////////////
	// for MatchSrv (5)
	MATCH_SRV_CMD_START                     = 5501;
    MATCH_PVP5_CANCEL_REQ               = 5502;         // 请求pvp5取消
    MATCH_PVP5_CANCEL_RSP               = 5503;
    MATCH_PVP5_DONE_NOTIFY              = 5504;         // pvp5匹配完成通知
	
	//邀请好友匹配
	MAIN_INVITE_FRIEND_REQ              = 5505;          //邀请好友
	MAIN_INVITE_FRIEND_RSP              = 5506;          //
	MAIN_RECV_INVITE_FRIEND_RSP         = 5507;          //收到好友的邀请
	MAIN_AGREE_INVITE_FRIEND_REQ        = 5508;          //同意好友的邀请
	MAIN_AGREE_INVITE_FRIEND_RSP        = 5509;          //
	MAIN_RECV_AGREE_INVITE_FRIEND_RSP   = 5510;          //收到好友同意邀请
	MAIN_QUIT_FRIEND_TEAM_REQ           = 5511;          //退出队伍
	MAIN_RECV_QUIT_FRIEND_TEAM_RSP      = 5512;          //好友退出队伍
	MAIN_RECV_DISS_FRIEND_TEAM_RSP      = 5513;          //队伍被解散
	MAIN_REFUSE_FRIEND_INVITE_REQ       = 5514;          //拒绝好友邀请
	MAIN_REFUSE_FRIEND_INVITE_RSP       = 5515;
    MAIN_RECV_REFUSE_FRIEND_INVITE_RSP  = 5516;
	
	MATCH_SRV_CMD_END                       = 6000;
	//////////////////////////////////////////////////////////////////
	
	//for GangSrv
	GANG_SRV_CMD_START					= 6001;
	GANG_CREATE_REQ						= 6002; //创建帮派
	GANG_CREATE_RSP						= 6003;
	GANG_SRV_CMD_END					= 6500;
}

message cs_reconnect
{
	optional uint64 uid = 1;
}

message sc_reconnect
{
	optional uint32 result = 1;
	optional bool login = 2;//值为true，调用CID_GW_USER_LOGIN走一次登录，为false表示重新建立连接，其他没有变化
}

// 网关登记
message sg_gw_register
{
    optional uint32             server_type        = 1;   // 服务器类型
}

message gs_gw_register
{
    optional uint32             result             = 1;   // 交易返回码
}

// 客户端登录
message cs_login
{
    optional string             name               = 1;   // 用户的账号account，guid注册登录的时候传递guid
//  optional string             token              = 2;   // 用户的token
	optional string             session            = 3;   // 重连的时候带过来，登录成功之后由服务器返回
	optional string             token              = 4;   // 用户的token
	optional uint64             uid                = 5;   // 向mainsrv登录的时候带上uid
	optional int32              cmd                = 6;   // 登录的命令字common_pb.proto LOGIN_CMD
	optional string             guid               = 7;   // 绑定账号的时候，guid在这里写入
	optional int32              plat               = 8;   // 平台id common_pb.proto LOGIN_PLAT
}

message sc_login
{
    optional uint32             result             = 1;   // 交易返回码
	optional string             name               = 2;   // 用户的账号account
//  optional string             alia_name          = 3;   // 如果玩家已经设置过别名, 这个值有效, result==RESULT_OK

    optional pb_role_info       role_info          = 6;   // 角色信息，昵称在这个字段的name中
    optional pb_gods_info       gods_info          = 7;   // 神明信息
    optional pb_lock_god_info   lock_god_info      = 8;   // 末解锁神明信息
    optional pb_chest_info      chest_info         = 9;   // 宝箱信息
    optional pb_copy_info       copy_info          = 10;  // 副本信息
    optional pb_lineup_info     lineup_info        = 11;  // 站位信息

	optional uint32             free_chest_space   = 12;  //免费宝箱的倒计时，为0表示可以打开
	optional string             session            = 13;  //登录成功之后服务器返回session
	
	optional uint64             uid                = 15;//新的登录机制里面，登录成功之后，会带回玩家的uid
	optional string             client_ip          = 16; //登录成功返回给客户端的ip
	optional uint32             client_port        = 17;//登录成功返回给客户端的port
	
    repeated PbTechTreeNode     tech_unit 		   = 18;  //科技id和等级
    optional pb_season_info     season_info        = 19;
	optional pb_task_info       task_info    	   = 21; //任务数据
	optional pb_activity_info   activity_info      = 22; //活动数据
    //optional PbCopiesInfo       copies_info        = 23; // 副本信息，信息移入pb_copy_info副本信息，信息移入pb_copy_info

    optional PbPantheonInfo     pantheon_info      = 24; // 神殿信息
}

message cs_set_alias_name
{
	//修改头像和个性签名都走的老的改昵称协议，服务器根据协议中的字段是否有内容来做相应处理
    optional string             alias_name          = 1;   // 用户的昵称
	optional uint32 			icon_id				= 2;   // 头像id
	optional bytes				sign_cxt			= 3;   // 个性签名
}

message sc_set_alias_name
{
    optional uint32             result              			= 1;
	optional string             alias_name          			= 2;
	optional uint32 			icon_id							= 3;   // 头像id
	optional bytes				sign_cxt						= 4;   // 个性签名
	optional uint64				last_modify_nickname_time		= 5;  // 上次修改昵称的时间
}

// 客户端请求pvp匹配
message cs_pvp_match
{
    optional pb_pvp_type         type               = 1;   // 类型，1v1、2v2
    optional uint32              mode               = 2;   // 模式，premake、all pick、draft(premake 只有在1v1时有效)
    repeated pb_formation        formation          = 3;   // 阵容，只有在premake模式时有效
	optional uint64 			 server_version     = 4;   // 服务器版本号，客户端传递字符串版本号，服务器转换成数字，传输和判断更加方便	
    optional string              client_vervion     = 10;  // 客户端版本
}

message sc_pvp_match
{
    optional uint32              result             = 1;   // 交易返回码
    optional pb_pvp_type         type               = 11;  // 匹配的类型
    optional uint32              mode               = 12;  // 匹配的模式 // 可能时多个mode的与操作
    optional uint64              bot_uid            = 13;  // 机器人UID, type是PVP_TYPE_CLASSIC_1V1_BOT, 该字段有效
    optional uint64              match_id           = 14;  // 匹配ID, type是PVP_TYPE_CLASSIC_1V1_BOT, 该字段有效
    optional pb_lineup_info      bot_lineup_info    = 15;  // 机器人占位信息, type是PVP_TYPE_CLASSIC_1V1_BOT, 该字段有效站位信息
}

message cs_pvbot_choose_gods_done
{
    optional pb_pvp_type         type               = 1;  // 匹配的类型
    optional uint64              match_id           = 2;
    optional uint64              bot_uid            = 3;
    optional pb_lineup_info      lineup_info        = 4;  // 客户端的选角
    optional pb_lineup_info      bot_lineup_info    = 5;  // 机器人占位信息
}

message sc_pvbot_choose_gods_done
{
    optional uint32              result             = 1;
    //repeated pb_combat_lineup    line_up            = 3;
    optional pb_combat_info      combat_info        = 4;  // 关卡信息
}

message cs_ask_pvbot_end
{
    optional uint64              match_id           = 1;   // pvbot ID
    optional bool                is_victory         = 2;   // 是否胜利 ture为胜利, false为失败
}

message pb_pvbot_reward
{
    optional pb_chest            chest              = 1;   // 宝箱
	repeated AwardUnit           award_unit         = 2;   // 人机的奖励不在掉落宝箱，直接掉落物品
}

message sc_ask_pvbot_end
{
    optional uint32              result             = 1;
    optional pb_pvbot_reward     reward             = 2;
}

// 客户端请求取消pvp匹配
message cs_pvp_match_cancel
{
    // 请求体为空
}

message sc_pvp_match_cancel
{
    optional uint32              result             = 1;   // 交易返回码
}

// 服务器通知PVP匹配完成
message pb_match_player_info
{
    optional uint32              team               = 1;
    optional uint32              player_id          = 2;
    optional uint32              player_level       = 3;
    optional string              name               = 4;
    //optional bytes               head_pic           = 5;
	optional uint64              uid                = 6; //其他人的uid
	optional uint32				 icon_id			= 7; //其他人头像id
}

message sc_pvp_match_done
{
    optional uint32              		player_id          = 1;
    optional uint32              		team               = 2;
    optional uint32              		type               = 3;
    optional uint32              		mode               = 4;
    repeated pb_match_player_info 		other_player_info  = 5;//其他人的信息
	
	optional uint64              		uid                = 6; //自己的uid
	optional bool                       warm_round         = 7; //是不是温暖局
}

// 匹配完成后确认
message cs_combat_accept_ack
{
    optional bool                accept             = 1;
}

message sc_combat_accept_ack
{
    optional uint32              player_id          = 1;
	optional uint64              uid                = 2;
}

message sc_combat_accpet_done
{
    // 空
}

// 服务器通知客户端比赛取消
message sc_combat_cancel_or_rematch_notify
{
    optional uint32                 reason          = 1; // refuse, timeout...
    optional bool                   is_rematch      = 2; // rematch when true, cancel when false
    optional uint32                 player_id       = 3; // the player who cancel, or timeout for accepting
	optional uint64                 uid             = 4; // 如果匹配取消是因为其中有一人拒绝了，那么此处就是该玩家的UID
}

// 匹配确认后选角
message cs_pvp_choose_gods
{
    repeated pb_formation        formation          = 1; //当前阵型
	optional uint32              godid              = 2; //新选择的英雄
}

// use for transmit the the client choosed god
message sc_pvp_choose_gods
{
    optional uint32              player_id          = 1;
    repeated pb_formation        formation          = 2;
}

// 选角确认
message cs_pvp_choose_gods_confirm
{
    // 空包
}

message sc_pvp_choose_gods_confirm
{
    optional uint32              player_id          = 1;
    repeated pb_formation        formation          = 2;
}

message sc_pvp_choose_gods_done
{
    optional uint32              type               = 1;
    repeated pb_combat_lineup    line_up            = 2;
    optional pb_combat_info      combat_info        = 3;   // 关卡信息
    optional string              pvp_host           = 4;   // pvp ip
    optional uint32              pvp_port           = 5;   // pvp 端口
    optional uint64              combat_id          = 6;   // 战斗 id
    optional uint32              sid                = 7;   // 验证 id
}

// 客户端请求,pvp结算;暂时由客户端请求，以后服务器计算胜利直接给客户推送
message pb_pvp_reward
{
    optional pb_pvp_type         type               = 1;
    optional float               rank_score         = 2;

    //optional uint32              money              = 10;   // 金钱，pvp回包不在使用此字段，除了宝箱，常规奖励都在AwardUnit
    optional pb_chest            chest              = 11;   // 宝箱
	
	repeated AwardUnit           award_unit         = 12;   // 经典模式中的1v1不在掉落宝箱，直接掉落物品
}

message cs_pvp_reward
{
    optional bool               is_victory          = 1;   // 是否胜利 ture为胜利, false为失败
}

message sc_pvp_reward
{
    optional int32              combat_id           = 1;   // 战斗id
    optional pb_pvp_reward      pvp_reward          = 2;   // pvp报酬
}

// 请求角色信息
message pb_role_info
{
    optional string             name                		= 1;   // 名字
    optional uint32             level               		= 2;   // 等级
    optional uint32             exp                 		= 3;   // 经验
    optional uint32             exp_upgrade         		= 4;   // 升级所需经验
    optional uint32             diamond             		= 5;   // 钻石
    optional uint32             gold                		= 6;   // 金币
    //optional uint32             ancient_token     		  = 7;   //远古代币
			
	repeated PbSkillStoneUnit   stone_uinit         		= 9;   //宝石信息
	optional uint32             tech_point          		= 10;  //升级科技树会消耗资源点，这个字段表示当前的资源点
			
    //optional uint32             new_guide_step    		  = 11;  //新手引导的步数1,2,3....
    optional uint32             physical_strength   		= 12;  // 体力
	optional uint32             max_strength        		= 13;  // 最大体力值
			
	repeated PbRecordNumUnit    exp_water           		= 14;  //经验药水
    optional uint32             common_fragment     		= 15;  //万能碎片
	optional uint32				god_talent_point			= 16;  //英雄天赋点
    repeated PbRecordNumUnit	material					= 17;  //用作升级英雄的天赋的材料
		
    repeated PbRecordNumUnit    daibi_list          		= 18; // 代币信息
			
	optional uint32				icon_id						= 19; //头像id
	optional bytes				sign_cxt					= 20; //个性签名
	optional uint32				god_num						= 21; //英雄总数
	optional uint32				total_power_score			= 22; //英雄总战力
	optional uint64				last_modify_nickname_time 	= 23;//上次修改昵称的时间
}

message cs_get_role_info
{
    optional uint64 				uid 					= 1;//取哪个用户的信息就传哪个uid
	optional pb_pvp_type 			type 					= 2;//取对战记录传是1v1竞技场还是2v2
	optional bool 					hide 					= 3;//隐藏对战记录，true表示隐藏
	optional uint32 				arena_lvl 				= 4;//取精彩对局时传入的竞技场等级
	optional uint32 				round_record_id 		= 5;//用作对精彩对局点赞
	optional uint32					page_num				= 6;//分页取精彩对局的功能，从零开始
}

message sc_get_role_info
{
    optional uint32             	result              = 1;   // 交易返回码
    optional pb_role_info       	role_info           = 2;   // 角色信息
	repeated PbRecordNumUnit		tech_point			= 3;   // 科技树的描述 TECH_TREE_TYPE
	optional pb_rank_combat_info	rank_1v1_info 		= 4;
    optional pb_rank_combat_info	rank_2v2_info 		= 5;
	
	repeated record_round_info		record_round		= 6;	//对战记录
	repeated FriendInfoTotal		record_role			= 7;	//对战记录中双方的头像，名字在其中，通过uid查找
	
	optional bool					hide_record			= 8;	//取对战记录返回的对应用户的隐藏设置
	
	optional uint32 				round_record_id 	= 9;	//点赞操作返回点赞的对战记录id
	optional uint32 				like_num 			= 10;	//点赞操作返回点赞的对战记录id当前的被赞数
	repeated uint32					like_record_id		= 11;	//点过赞的精彩对局
	optional uint32					view_num			= 12;
	
	repeated uint32					view_record_id		= 13;	//观看的精彩对局
	optional record_round_info		one_round			= 14;	//观看精彩对局，返回一局战斗记录
}


message cs_get_gods_info
{
    // 请求消息体为空
}

message sc_get_gods_info
{
    optional uint32             result              = 1;   // 交易返回码
    optional pb_gods_info       gods_info           = 2;   // 神明信息
    optional pb_lock_god_info   lock_god_info       = 3;   // 末解锁神明信息
	repeated uint32             unlock_godid        = 4;   // 新手阶段获得碎片自动解锁的神明id
	repeated pb_god             before_lvlup_god    = 5;   // 如果英雄的经验发生变化触发了升级，但是不是在使用经验药水的时候，这个数组会包含升级前的信息
}

// 请求宝箱信息
message pb_chest
{
    optional uint32             chest_id            = 1;   // 宝箱id
    optional uint32             time                = 2;   // 总时间
    optional uint32             type                = 3;   // 宝箱类型，金银铜，ARENA_CHEST_TYPE

    optional bool               is_unlock           = 4;   // 是否解锁
    optional uint32             remainder_time      = 5;   // 剩余时间 (当is_unlock是true时, 这个值才有效)
	
	optional uint32     		chest_pool_type     = 6;   // 属于哪个宝箱池，排位还是经典  CHEST_POOL_TYPE
	optional uint32             arena_level         = 7;   // 是打几阶竞技场掉落的
	optional uint32     		arena_type          = 8;   //竞技场类型1v1还是2v2, pb_pvp_type
}

message pb_chest_info
{
    repeated pb_chest           chest_list          = 1;   // 宝箱
}

message cs_get_chest_info
{
    // 请求消息体为空
}

message sc_get_chest_info
{
    optional uint32             result              = 1;   // 交易返回码
    optional pb_chest_info      chest_info          = 2;   // 宝箱信息
}

// 请求解锁宝箱
message cs_unlock_chest
{
    optional uint32             chest_id            = 1;   // 宝箱id
}

message sc_unlock_chest
{
    optional uint32             result              = 1;   // 交易返回码
    optional pb_chest           chest               = 3;   // 解锁的宝箱
}


message cs_open_chest
{
    optional uint32             chest_id            = 1;   // 宝箱id
}

message sc_open_chest
{
    optional uint32             result              = 1;   // 交易返回码
    //optional pb_chest_goods     chest_goods         = 2;   // 开箱物品
    //optional pb_gods_info       gods_info           = 3;   // 神明信息
    //optional pb_role_info       role_info           = 4;   // 角色信息
	repeated AwardUnit          awardunit          = 5;   // 开箱物品
}

// 升级神明
message cs_upgrade_god
{
    optional uint32             id                  = 1;
	optional uint32             exp_water_id        = 2;
	optional uint32             num                 = 3;
	optional bool               all_exp_water       = 4;//如果是一键升级这个值设置为true
}

message sc_upgrade_god
{
    optional uint32             result              = 1;   // 交易返回码
    optional pb_god             god                 = 2;   // 神明信息
    optional pb_role_info       role_info           = 3;   // 角色信息
	optional uint32             exp_water_id        = 4;   // 使用的经验药水id
	optional bool               star_up             = 5;   // 如果激活的最后一个节点，该值为true，表示升星
	optional pb_god             before_god          = 6;   // 激活节点前的神明信息
	repeated PbRecordNumUnit    exp_water           = 7;   // 显示一键升级消耗的经验药水
	optional bool               level_up            = 8;   // 使用经验药水的协议中，该值为true，表示等级提升，英雄属性发生变化
	optional bool               level_space_up      = 9;   // 使用经验药水的协议中，该值为true，表示等级区间提升，英雄属性发生变化
	optional uint32				over_exp			= 10;  // 升级时候溢出的经验
}

// 解锁神明
message cs_unlock_god
{
    optional uint32             id                  = 1;
}

message sc_unlock_god
{
    optional uint32             result              = 1;   // 交易返回码
    optional pb_god             god                 = 2;   // 神明信息
    optional pb_role_info       role_info           = 3;   // 角色信息
}

// 升级技能
message cs_upgrade_skill
{
    optional uint32             god_id              = 1;   // 神明id
    optional uint32             skill_id            = 2;   // 技能id
}

message sc_upgrade_skill
{
    optional uint32             result              = 1;   // 交易返回码
    optional pb_god             god                 = 2;   // 神明信息
    optional pb_role_info       role_info           = 3;   // 角色信息
	optional pb_god				before_god          = 4;   // 技能升级之前的信息
}

// 解锁技能
message cs_unlock_skill
{
    optional uint32             god_id              = 1;   // 神明id
    optional uint32             skill_id            = 2;   // 技能id
}

message sc_unlock_skill
{
    optional uint32             result              = 1;   // 交易返回码
    optional pb_god             god                 = 2;   // 神明信息
    optional pb_role_info       role_info           = 3;   // 角色信息
	optional pb_god             before_god          = 4;   // 技能解锁之前的信息
}

message cs_ask_round3_pve
{
    optional uint32              chapter_id         = 1;   // 3round PVE chapter id
    optional uint32              checkpoint_id      = 2;   // 3round PVE checkpoint id
}

message sc_ask_round3_pve
{
     optional uint32              result             = 1;   // 交易返回码
     optional pb_combat_lineup    line_up            = 2;   // 玩家自身的占位信息
     optional pb_combat_info      combat_info        = 3;   // combat_info player和team_info只有玩家自己的
     //optional pve3_monster_info checkpoint_monster_info  = 4; // pve野怪信息
     optional uint32 physical_strength_cost          = 5;  // 体力消耗数
	 optional uint32              checkpoint_id      = 6;  // 重置每日关卡每日挑战数的返回
	 repeated AwardUnit           drop_award_unit    = 7;  // 该关卡所有怪物掉落奖励
}

message cs_obtain_star_award
{
    optional uint32 chapter_id = 1; // 获取的星级奖励的章节id
    optional uint32 star_level = 2; // 获取的是哪个星级的奖励
}

message sc_obtain_star_award
{
    optional uint32 result = 1;         // 获取奖励的返回码, 如果成功, 返回RESULT_OK
    repeated AwardUnit awards = 2;      // 领取了的多少奖励
	optional uint32 star_level = 3;     // 领取奖励的星级
}

message cs_pve_raid
{
    optional uint32 chapter_id = 1;     // PVE chapter id
    optional uint32 checkpoint_id = 2;  // PVE checkpoint id
    optional uint32 num = 3;            // 扫荡的次数
}

message pb_raid_award
{
    optional uint32 num = 1;            // 第几次扫荡, 从1开始
    repeated AwardUnit award = 2;       // 扫荡的奖励
	//optional uint32 all_god_exp = 3;    // 给上场英雄增加的经验
}

message sc_pve_raid
{
    optional uint32 result = 1;                 // 请求返回码
    optional uint32 raid_num = 2;               // 实际扫荡的次数
    optional uint32 physical_strength_cost = 3; // 体力消耗数
	repeated pb_raid_award awards = 4;  // 扫荡的奖励
}

// pve结算
message pb_pve_reward
{
    optional uint32              money              = 1;   // 金钱
//  pve不再返回宝箱
//  optional pb_chest            chest              = 2;   // 宝箱
	
	//直接发放pve奖励，通知客户端获得了哪些奖励
	repeated AwardUnit           award_lst          = 3;  //统一奖励结构，定义在common_pb.proto中
}

message cs_ask_round3_pve_end
{
    optional uint32              checkpoint_id      = 1;   // PVE ID
    optional bool                is_victory         = 2;   // 是否胜利 ture为胜利, false为失败
    optional uint32              star_num           = 3;   // 获得的星级个数
    optional uint32              chapter_id         = 4;   // 章节id
	repeated uint32              star_cond_id       = 5;   // 获得星级的条件id，数组长度最大为5，超过5服务器会截断
}

message sc_ask_round3_pve_end
{
    optional uint32 result = 1;                 // 交易返回码
    optional uint32 last_pass_id = 3;           // 最后一个通关的关卡id 读数据库最后一个通关的关卡id 读数据库
    //repeated uint32 pass_id = 4;              // 已经通关的关卡id 读数据库
    optional bool flag = 5;                     // 如果值true，表示last_pass_id是第一次通过，需要插旗动画
    repeated AwardUnit awards = 6;              // 增加了多少常规奖励，包含关卡常规掉落和怪物常规掉落
    optional PbChapterUnit chapter_info = 7;    // 章节信息, 用来刷新, 只有数值变化了之后会有内容
	optional uint32 star_num = 8;               // pve结束后的评星
	repeated uint32 star_cond_id = 9;
	//optional uint32 all_god_exp = 10;         // pve所有上场英雄增加的经验
	repeated AwardUnit first_monster_drop_awards = 11;       // 首次通关，怪物的额外掉落
}

message cs_gods_of_war
{
    optional uint32 pantheon_id = 1;                    // 神殿id
    optional uint32 difficulty_level = 2;               // 神殿难以级别
    optional uint32 damage_level = 3;                   // 伤害级别, 用于MAIN_GODS_OF_WAR_END_REQ请求
    optional bool is_victory = 4;                       // 是否胜利, 用于MAIN_GODS_OF_WAR_END_REQ请求
    optional bool is_force_exit = 5;                    // 是否点按钮退出, 如果是, 则不扣次数, 用于MAIN_GODS_OF_WAR_END_REQ请求
}

message sc_gods_of_war
{
    optional uint32 result = 1;                         // 交易返回码, 购买次数的时候会可能返回DIAMOND_NOT_ENOUGH
    optional pb_combat_lineup line_up = 2;              // 玩家自身的占位信息,MAIN_GODS_OF_WAR_RSP有效
    optional pb_combat_info combat_info = 3;            // combat_info player只有玩家自己的, MAIN_GODS_OF_WAR_RSP有效

    optional uint32 pantheon_id = 4;                    // 神殿id, MAIN_GODS_OF_WAR_RSP有效
    //optional uint32 open_difficulty = 5;                // 可能有新的难度开放了, MAIN_GODS_OF_WAR_END_RSP有效
    //optional uint32 remain_challenge_num = 6;           // 剩余挑战次数, MAIN_GODS_OF_WAR_RSP有效
    repeated AwardUnit awards = 7;                      // 奖励，MAIN_GODS_OF_WAR_END_RSP、MAIN_GODS_OF_WAR_RAID_RSP有效
    repeated AwardUnit first_awards = 8;                // 首通奖励，MAIN_GODS_OF_WAR_END_RSP、MAIN_GODS_OF_WAR_RAID_RSP有效
    optional PbPantheonUint pantheon_unit = 9;          // 用于刷新神殿, MAIN_GODS_OF_WAR_END_RSP, MAIN_GODS_OF_WAR_RAID_RSP有效
    optional uint32 gems_cost = 10;                     // 购买次数消耗的钻石数, MAIN_GODS_OF_WAR_BUY_FIGHT_NUM_RSP
}

message cs_ancient_battlefield
{
    optional uint32 id = 2;                                     // 所请求的关卡id
    //optional pb_combat_lineup line_up = 2;                    // 玩家的选的阵型

    // 远古战斗的结束请求
    optional bool is_victory = 3;                               // 是否胜利
    repeated pb_died_god died_god_list = 4;                     // 死亡的英雄的id
    optional bool is_force_exit = 5;                            // 是否点按钮退出

    // 用于复活卡的使用
    optional uint32 revive_id = 6;                              // 复活卡使用
    optional uint32 to_revive_god_id = 7;                       // 需要复活的英雄的id

    optional bool is_onekey_raid = 8;                           // 是否是一键扫荡, 如果不是一键扫荡, 需要传扫荡的关卡id
}

message sc_ancient_battlefield
{
    optional uint32 result = 1;                                 // 结果码
    // 用于获取远古战场信息
    optional pb_ancient_battlefield_info battlefield_info = 2;  // 远古战场信息

    // 用于远古战场的请求
    repeated pb_combat_lineup lineup_list = 3;                  // 玩家自身的占位信息
    optional pb_combat_info combat_info = 4;                    // combat_info player和team_info只有玩家自己的

    // 用于刷新单个远古关卡信息
    optional pb_ancient_battlefield_unit battlefield_unit = 5;  // 远古关卡信息

    // 用于结算或者开宝箱获取的奖励
    repeated AwardUnit rewards = 6;                             // 相关的奖励
}

 message cs_lightombtf
 {
    optional uint32 id = 1;                                     // 所请求的光影池id
    optional uint32 hard_lv = 2;                                // 光影池难度等级

    // 远古战斗的结束请求
    //optional bool is_victory = 3;                               // 是否胜利
    optional uint32 round_num = 4;                              // 通过的波次
    optional bool is_force_exit = 5;                            // 是否点按钮退出
    optional AwardUnit half_round_reward = 6;                   // 半波的奖励, 放在这里, 类型只可能是金币/经验药水, 科技池没有半波的概念
 }
 
 message sc_lightombtf
 {
    optional uint32 result = 1;                                // 结果码, 如果购买挑战次数DIAMOND_NOT_ENOUGH
    // 用于获取光影战场信息
    optional pb_lightombtf_info lightombtf_info = 2;           // 光影战场信息

    // 用于光影战场的请求
    optional pb_combat_lineup line_up = 3;                     // 玩家自身的占位信息
    optional pb_combat_info combat_info = 4;                   // combat_info player和team_info只有玩家自己的

    // 用于刷新单个远古关卡信息
    optional pb_lightombtf_unit lightombtf_unit = 5;           // 光影池信息

    // 用于结算或者开宝箱获取的奖励
    repeated AwardUnit rewards = 6;                            // 相关的奖励

    // 波数奖励
    repeated pb_lightombtf_round_unit round_reward_list = 7;   // 波数奖励

    // 购买次数消耗的钻石数
    optional uint32 gems_cost = 8;                            // MAIN_LIGHTOM_BUY_FIGHT_NUM_RSP
}

message pb_buff
{
    optional uint32              buffs_id           = 1;   // 队伍buffid
    optional uint32              real_id            = 2;   // 真实id
    optional uint32              percent            = 3;   // 百分比
    optional uint32              value              = 4;   // 值
    optional uint32              duration           = 5;   // 持续时间
}

message pb_copy_enemy_unit
{
	optional uint32 enemy_god_id = 1;
	optional uint32 enemy_god_lvl = 2;
}

message pb_copy
{
    optional uint32              checkpoint_id      = 1;   // 关卡id
    optional uint32              scene_id           = 2;   // 场景id
    optional uint32              chapter_id         = 3;   // 章节id
    optional uint32              front_id           = 4;   // 前置关卡id
    optional uint32              chapter_num        = 5;   // 章节节点
    optional uint32              combat_count_down  = 6;   // 关卡时间
    optional uint32              role_level_limit   = 7;   // 队伍等级限制 uint32
    optional uint32              chest_id           = 8;   // 通关奖励(宝箱id)
//    repeated uint32              enemy_god_id       = 9;   // 敌方英雄id
	repeated pb_copy_enemy_unit  enemy_god_lst      = 10;//敌方英雄数组
}

message pb_all_copies
{
    repeated pb_copy             copies              = 1;   // 所有关卡
}

message pb_chapter_star_award
{
	optional uint32 chapter_id = 1;
	repeated uint32 award_star_level = 2;//已经领取过的奖励的star level
}

message pb_copy_info
{
    //optional uint32                		last_active_checkpoint_id      = 1;
    //optional uint32                		last_active_chapter_id         = 2;
    //optional uint32                		last_pass_id                   = 3;   // 最后一个通关的关卡id 读数据库
    //repeated uint32                		pass_id                        = 4;   // 已经通关的关卡id 读数据库
    optional pb_all_copies         		all_copies                     = 5;   // 所有关卡 读配置
	optional uint32     		   		flag_checkpoint_id             = 6;   // 最近通过的，需要展示插旗动画的id
	repeated PbRecordNumUnit 	   		pve_check_point_fight_num      = 7;   // 今日副本挑战次数，包含重置次数
	optional PbCopiesInfo          		pve_round3                     = 8;   // 三段 副本信息
	repeated pb_chapter_star_award 		pve_round3_star_award          = 9;   // 三段 星级奖励
	//optional uint32                     pve_round3_reset_num           = 10;  // 三段 每日关卡重置次数
}

// Todo delete
message cs_get_copy_info
{
}

// Todo delete
message sc_get_copy_info
{
    optional uint32              result                   = 1;   // 交易返回码
    optional pb_copy_info        copy_info                = 2;   // 副本信息
}

message cs_get_coies_info
{

}

// Todo delete
message sc_get_copies_info
{
    optional uint32              result                   = 1;   // 交易返回码
    optional PbCopiesInfo        copy_info                = 2;   // 副本信息
}

// line_up
message pb_lineup
{
    repeated pb_formation        formation          = 2;   // 阵容信息
    // 以下两个字段type&id在pb_lineup_info的lineup_list字段里有效
    optional pb_lineup_type      type               = 3;   // 阵型的类型, 该字段在pb_lineup_info的lineup_list字段里有效
    optional uint32              id                 = 4;   // 阵型id, 有些类型有多个阵型, 如诸神之战, 若某个类型的阵型只有1个, 此id无效
}

message cs_get_lineup_info
{
    optional uint32 god_id = 1;//新选择的英雄
	repeated pb_formation formation = 2;   // 已有的阵容信息
}

message pb_lineup_info
{
    optional pb_lineup           lineup_1v1         = 1;   // 1v1阵容信息
    optional pb_lineup           lineup_pve         = 2;   // pve阵容信息
    optional pb_lineup           lineup_pvbot       = 3;   // pvbot阵容信息
    //optional pb_lineup           lineup_pantheon    = 4;   // 诸神之战阵容信息
    repeated PbPantheonLineup    lineup_pantheons   = 5;   // 诸神之战阵容信息
    //optional pb_lineup           lineup_ancient_bf  = 6;   // 远古阵容信息
    repeated pb_lineup           lineup_list        = 7;   // 远古, 光影的信息在这个字段里面，后续看情况再把所有阵型都放在这里
}

message sc_get_lineup_info
{
    optional uint32              result             = 1;   // 交易返回码
    optional pb_lineup_info      lineup_info        = 2;   // 站位信息
}

message cs_set_lineup_info
{
    optional bool                is_reput           = 1;   // 服务端是否要帮客户端重新布阵(true是，false否)
    optional pb_lineup           lineup             = 2;   // 阵容信息
    optional pb_lineup_type      type               = 3[default = LINEUP_PVE];
    optional uint32              id                 = 4;   // 一个id标识，比如设置神殿的阵型时使用
}

message sc_set_lineup_info
{
    optional uint32              result             = 1;   // 交易返回码
    optional pb_lineup_info      lineup_info        = 2;   // 站位信息
}

// 赛季信息请求
message cs_get_season_info
{
    // empty
}

message pb_season_combat_info
{
    optional uint32 arena_level = 6;                        // 玩家竞技场等级
	optional uint32 total_victory_num = 7;                  // 总共胜利的次数
    optional uint32 total_combats_num = 8;                  // 总共战斗的次数
    optional uint32 max_continue_victory_num = 9;           // 最高连胜的次数
    optional uint32 rank_score = 10;                         // 赛季积分
    optional uint32 rank = 11;                               // 排行名次
}

message pb_season_info
{
    optional uint32 season_id = 2;                          // 赛季id
    optional uint64 start_time = 3;                         // 赛季开始时间
    optional uint64 end_time = 4;                           // 赛季结束时间
    optional uint64 next_start_time = 5;                    // 下一个赛季开始的时间
    optional pb_season_combat_info combat_1v1_info = 15;    // 该玩家当前的战绩
    optional pb_season_combat_info combat_2v2_info = 16;    // 该玩家当前的战绩
    repeated slot_chest_info chest_1v1_preview_info = 17;   // 1v1宝箱预览信息
    repeated slot_chest_info chest_2v2_preview_info = 18;   // 2v2宝箱预览信息
	optional bool is_in_season = 19;                        // 是否在赛季当中, 如果false next_start_time值有效
}

message sc_get_season_info
{
    optional uint32 result = 1;
    optional pb_season_info season_info = 4;    // 
}

message cs_season_notify_read
{
    optional uint32 season_id = 1;
    optional season_notify_type type = 2[default = SEASON_NOTIFY_TYPE_1V1_REWARD];
}

message PbSeasonNotityInfo
{
    repeated PbSeasonNotity notifies = 1;
}

message sc_season_nonfiy
{
    optional PbSeasonNotityInfo notify_info = 1;
}

message sc_season_reward_notify
{
    repeated AwardUnit award_unit = 1;
}

// 客户端设置玩家的loading进度
message cs_loading_process
{
    optional uint32 progress = 1;
}

message load_unit
{
    optional uint32 player_id = 1;          // player的id
    optional uint32 progress = 2;           // player的进度
}

message sc_loading_process_notify
{
    optional int32 result = 1;
    repeated load_unit loading_info = 2;             // player的进度信息
}

// 总消息包
message net_packet
{
    optional cs_login                               cs_login                   = 1;    // 客户端登录
    optional sc_login                               sc_login                   = 2;
//    optional cs_offline                             cs_offline                 = 3;    // 客户端注销
//    optional sc_offline                             sc_offline                 = 4;

    // pvp
    optional cs_pvp_match                           cs_pvp_match               = 5;   // 客户端请求pvp匹配
    optional sc_pvp_match                           sc_pvp_match               = 6;
    optional cs_pvp_match_cancel                    cs_pvp_match_cancel        = 7;   // 客户端请求取消pvp匹配
    optional sc_pvp_match_cancel                    sc_pvp_match_cancel        = 8;

    optional cs_combat_accept_ack                   cs_combat_accept_ack       = 9;   // 匹配完成后确认
    optional sc_combat_accept_ack                   sc_combat_accept_ack       = 10;
    optional sc_combat_accpet_done                  sc_combat_accpet_done      = 11;
    optional sc_combat_cancel_or_rematch_notify     sc_bat_cancel_or_rematch   = 12;

    optional cs_pvp_choose_gods                     cs_pvp_choose_gods         = 13;
    optional sc_pvp_choose_gods                     sc_pvp_choose_gods         = 14;

    optional cs_pvp_choose_gods_confirm             cs_pvp_choose_gods_confirm = 15;
    optional sc_pvp_choose_gods_confirm             sc_pvp_choose_gods_confirm = 16;

    optional sc_pvp_choose_gods_done                sc_pvp_choose_gods_done    = 17;

    optional sc_pvp_match_done                      sc_pvp_match_done          = 18;   // 服务器通知PVP匹配完成

    // info
    optional cs_get_role_info                       cs_get_role_info           = 19;   // 请求角色信息
    optional sc_get_role_info                       sc_get_role_info           = 20;
    optional cs_get_gods_info                       cs_get_gods_info           = 21;   // 请求神明信息
    optional sc_get_gods_info                       sc_get_gods_info           = 22;
    optional cs_upgrade_god                         cs_upgrade_god             = 23;   // 升级神明
    optional sc_upgrade_god                         sc_upgrade_god             = 24;
    optional cs_upgrade_skill                       cs_upgrade_skill           = 25;   // 升级技能
    optional sc_upgrade_skill                       sc_upgrade_skill           = 26;

    optional sc_pvp_reward                          sc_pvp_reward              = 31;   // pvp结算

    optional cs_get_chest_info                      cs_get_chest_info          = 32;   // 请求宝箱信息
    optional sc_get_chest_info                      sc_get_chest_info          = 33;
    optional cs_unlock_chest                        cs_unlock_chest            = 34;   // 请求解锁宝箱
    optional sc_unlock_chest                        sc_unlock_chest            = 35;
    optional cs_open_chest                          cs_open_chest              = 36;   // 请求开宝箱
    optional sc_open_chest                          sc_open_chest              = 37;

    optional cs_pvp_reward                          cs_pvp_reward              = 38;   // 客户端请求pvp结算; 暂时由客户端请求，以后服务器计算胜利后会直接给客户推送

    optional cs_get_copy_info                       cs_get_copy_info           = 39;   // 请求副本信息
    optional sc_get_copy_info                       sc_get_copy_info           = 40;

    optional cs_get_lineup_info                     cs_get_lineup_info         = 41;   // 请求阵容信息
    optional sc_get_lineup_info                     sc_get_lineup_info         = 42;
    optional cs_set_lineup_info                     cs_set_lineup_info         = 43;   // 设置阵容信息
    optional sc_set_lineup_info                     sc_set_lineup_info         = 44;

    optional cs_unlock_skill                        cs_unlock_skill            = 45;   // 解锁技能
    optional sc_unlock_skill                        sc_unlock_skill            = 46;

    optional cs_unlock_god                          cs_unlock_god              = 47;   // 解锁英雄
    optional sc_unlock_god                          sc_unlock_god              = 48;

	optional bytes mainsrv_cs_body                                             = 53;
	optional bytes mainsrv_sc_body                                             = 54;
}

message notice_horse_info
{
	repeated bytes content = 1;
}

message cs_gang
{
	optional uint32 	gang_id 	= 1;//工会id
	optional bytes 		gang_name 	= 2;//工会名字
}

message sc_gang
{
	optional int32 result = 1;
}

//////////////////////////////////////////////////////////////////////////
message cs_pvp_sync_data
{
    optional pb_frame_sync_info sync_data = 1;         // 同步数据
}

message sc_pvp_sync_data
{
    optional pb_frame_sync_info sync_data = 1;    // 同步数据
}
