syntax = "proto2";
//option optimize_for = LITE_RUNTIME;
import "common_pb.proto";
package protocol;

message cs_pay
{}

message sc_pay
{
	optional int32 result = 1;
}


//商城协议开始
message card_price_info
{
	optional uint32 god_id = 1;//神明id
	optional uint32 cur_gold = 2;//当前这张的价格
	optional uint32 total_gold = 3;//买齐所有的价格
	optional uint32 total_num = 4;//总共还可以购买多少张
	optional uint32 card_type = 5;//卡的类型 enum CARD_TYPE
}

message slot_info
{
	optional uint32 slot_id = 1;
	optional uint32 id = 2;
}

enum SHOP_TAB
{
	st_chest = 1;//商城宝箱
	st_gold = 2;//商城金币
}

message sell_rank_unit
{
	optional uint32 	tab 			= 1;//SHOP_TAB
	optional uint32 	sub_tab 		= 2;
	optional bool		top 			= 3;//为true表示置顶
	optional uint32		original_cost 	= 4;//表示原价
}

message money_info
{
	optional uint32 id 					= 1;
	optional uint32 gold 				= 2;
	optional uint32 diamond 			= 3;
	optional uint32 rmb					= 4;
	optional uint32 original_cost 		= 5;//商城金币指钻石diamond字段的原价，钻石商城指rmb真实价格的原价
}

message cs_shop
{
	optional uint32 id 			= 1;
	optional uint32 chest_id 	= 2;
	optional uint32 slot_id 	= 3;//宝箱槽的id
	optional uint32 num			= 4;//商城道具购买次数
}

message sc_shop
{
	optional uint32 					result					= 1;
	repeated slot_info 					slot_info 				= 2;//商城卡槽的信息
	repeated card_price_info 			price_info 				= 3; //卡槽内卡的价格信息
	optional int64 						server_cur_time 		= 6;//服务器当前时间
	optional uint32 					fresh_countdown 		= 7;//卡刷新的倒计时
	repeated sell_rank_unit 			sellrankunit 			= 8;
	repeated slot_chest_info 			chest_info				= 9;
	optional uint32 					free_chest_space 		= 10;//免费宝箱的倒计时（秒），如果这个值为0，表示宝箱可以打开
	repeated AwardUnit 					award_unit 				= 11;//返回 商城购买宝箱或打开免费宝箱获得的奖励
	repeated money_info 				gold_info 				= 12;//购买金币信息
	repeated money_info 				diamond_info 			= 13;//购买钻石信息
//	optional uint32 					diamond 				= 14;//当前钻石
	repeated PbRecordNumUnit			goods_buy_record		= 15;//商城道具每日购买记录
	optional uint32						id						= 16;//商城道具购买的id
	
	optional shang_dian_tab_unit 		tab_unit 				= 17;//商店的天梯页签在商城显示
}

message cs_store_buy_phy_strength
{
	optional uint32 id = 1;
	optional uint32 num = 2;
}

message sc_store_buy_phy_strength
{
	optional uint32 result = 1;
	optional uint32 diamond_cost = 2;	// 钻石消耗
}

//商城协议结束


message cs_stone
{
	optional uint32 level = 1;//要合成的宝石的等级
	optional uint32 num = 2;//要合成多少个
}

message sc_stone
{
	optional uint32 result = 1;
	optional uint32 level = 2;
	optional uint32 max_num = 3;//最多可以合成多少个
	optional uint32 cost_gold = 4;//合成要消耗已有的金币
	repeated PbSkillStoneUnit cost_stone = 5;//合成要消耗已有的宝石
	optional uint32 need_stone = 6;//合成还需要的宝石，指的一阶宝石，如果下面两项为0，说明自身条件满足合成
	optional uint32 need_gold = 7;//合成还需要的金币
}

message cs_tech_tree
{
	optional uint32 tech_id = 1; //升级哪个科技点
	optional uint32 tech_tree_type = 2;//TECH_TREE_TYPE 重置哪类科技树
}

message sc_tech_tree
{
	optional uint32 result = 1;
	optional PbTechTreeNode node = 2;//升级之后科技节点的变化信息。升级和重置，资源点都会变化，会在MAIN_GET_ROLE_INFO_RSP协议通知
	repeated PbTechTreeNode unlock_node = 3;//解锁的科技节点，科技树节点只依赖角色等级或者重置科技树之后，会返回所有科技点的信息
	
	optional uint32 return_gold = 4;//重置返还的金币
	optional uint32 return_tech_point = 5;//重置返还的科技点
}


enum TECH_TREE_BUF_TYPE
{
	t_hp = 1;//塔血量增加
	t_phy = 2;//塔物防增加
	t_magic = 3;//塔魔防增加
	t_attack = 4;//塔攻击增加
	t_hp_per = 5;//塔血量增加%
	t_phy_per = 6;//塔物防增加%
	t_magic_per = 7;//塔魔防增加%
	t_attack_per = 8;//塔攻击增加%
	t_god_phy = 9;//塔范围增加物防
	t_god_magic = 10;//塔范围增加魔防
	t_c_attack_overlap = 11;//塔对近战攻击叠加
	t_f_attack_overlap = 12;//塔对远程攻击叠加
	p_hp = 13;//车血量增加
	p_phy = 14;//车物防增加
	p_magic = 15;//车魔防增加
	p_attack = 16;//车攻击增加
	p_hp_per = 17;//车血量增加%
	p_phy_per = 18;//车物防增加%
	p_magic_per = 19;//车魔防增加%
	p_attack_per = 20;//车攻击增加%
	p_hold_phy = 21;//车架起增加物防%
	p_hold_magic = 22;//车架起增加魔防%
	p_hold_hp = 23;//车架起增加血量%
	p_hold_attack = 24;//车架起增加攻击%
	s_hp = 25;//兵血量增加
	s_phy = 26;//兵物防增加
	s_magic = 27;//兵魔防增加
	s_attack = 28;//兵攻击增加
	s_f_hp_per = 29;//远兵血量增加%
	s_f_phy_per = 30;//远兵物防增加%
	s_f_magic_per = 31;//远兵魔防增加%
	s_f_attack_per = 32;//远兵攻击增加%
	s_c_hp_per = 33;//近兵血量增加%
	s_c_phy_per = 34;//近兵物防增加%
	s_c_magic_per = 35;//近兵魔防增加%
	s_c_attack_per = 36;//近兵攻击增加%
	g_hp = 37;//英雄血量增加
	g_attack = 38;//英雄物理攻击增加
	g_phy = 39;//英雄物理防御增加
	g_magic = 40;//英雄魔法防御增加
	g_hp_per = 41;//英雄血量增加%
	g_attack_per = 42;//英雄物理攻击增加%
	g_phy_per = 43;//英雄物理防御增加%
	g_magic_per = 44;//英雄魔法防御增加%
	g_attack_magic = 45;//英雄魔法攻击增加
	g_attack_magic_per = 46;//英雄魔法攻击增加% 
}

enum CHEST_POOL_TYPE
{
	cpt_rank = 1;//排位
	cpt_classic = 2;//经典
}

enum ARENA_CHEST_TYPE
{
	act_silver 			= 1;//风化宝箱
	act_gold			= 2;//锈蚀铭文宝箱
	act_huge 			= 3;//铜制伪金宝箱
	act_leg 			= 4;//熔铸冰火宝箱
	act_special 		= 5;//特殊宝箱类型是一种中间类型，获得这类宝箱的时候会转化到ARENA_SPECIAL_CHEST_TYPE类型，客户端得到的是ARENA_SPECIAL_CHEST_TYPE
							//该类型在宝箱循环表中存在，不在配置具体宝箱内容表中存在
	act_classic 		= 6;//经典模式宝箱，旧的经典模式下获得宝箱
	act_new_guy 		= 10;//锈蚀铭文铁箱(新手宝箱)
}

enum ARENA_SPECIAL_CHEST_TYPE
{
	act_sep_super 		= 7;//熔铸冰火宝箱
	act_sep_epic 		= 8;//创世之神宝箱
	act_sep_leg 		= 9;//铜制伪金宝箱
}

message sc_strength
{
	optional uint32 result = 1;
	optional uint32 cur_num = 2;//今天的第几次购买
	optional uint32 max_num = 3;//今天最多购买的次数
	optional uint32 diamond = 4;//消耗的钻石
	optional uint32 strength = 5;//购买能增加的体力
}

enum SHANG_DIAN_TAB
{
	sdt_shenmi = 1; //神秘
	sdt_yuangu = 2; //远古
	sdt_rank   = 3; //天梯
}

message shang_dian_tab_unit
{
	optional uint32 				tab_id 				= 1;//页签SHAN_DIAN_TAB
	optional uint32 				sys_fresh_space 	= 2;//下次系统刷新的间隔时间，秒
	optional uint32 				fresh_num 			= 3;//当天刷新次数
	optional uint32 				max_free_fresh_num 	= 4;//当天免费刷新次数
	repeated shang_dian_sub_unit 	sub_unit 			= 5;
}

message shang_dian_sub_unit
{
	optional uint32 		sub_tab_id 		= 1;//格子id
	optional AwardUnit 		goods 			= 2;//售卖的内容
	optional AwardUnit 		cost 			= 3;//花费
	optional bool 			already_sell 	= 4;//是否售罄
	optional uint32 		arena_lvl 		= 5;//解锁需要的竞技场等级
	repeated uint32 		tag 			= 6;//精选标签
	optional uint32			original_cost	= 7;//原价
}

message cs_shangdian
{
	optional uint32 tab_id = 1;
	optional uint32 sub_tab_id = 2;
}

message sc_shangdian
{
	optional int32 result = 1;
	repeated shang_dian_tab_unit tab_unit = 2;//商店内容
	
	optional uint32 tab_id = 6;//购买时候返回购买的是哪个格子
	optional uint32 sub_tab_id = 7;
}

message cs_god_talent
{
	optional uint32 god_id = 1;
	optional uint32 talent_lvl = 2;
	optional uint32 talent_idx = 3;
}

message sc_god_talent
{
	optional int32 result = 1;
	optional pb_god before_god = 2;
	optional pb_god god = 3;
}
